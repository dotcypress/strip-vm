use crate::*;
use crate::parser::*;

grammar;

pub Strip: Exprs<'input> = <Exp*> => <>;

Comment: &'input str = {
  r"#.*" => <>,
  r"//.*" => <>,
};

Ident: &'input str = r"[A-z][/./_A-z0-9]*" => <>;
String: &'input str = "\"" <ident:Ident> "\"" => ident;
Label: &'input str = <ident:Ident> ":" => ident;

NumLit: i64 = {
  r"-?[0-9]+" => i32::from_str_radix(<>, 10).unwrap() as i64,
  <num:r"0b[01]+"> => u64::from_str_radix(&num[2..], 2).unwrap() as i64,
  <num:r"0x[a-fA-F0-9]+"> => u64::from_str_radix(&num[2..], 16).unwrap() as i64,
};

RegLit: Reg = {
  "x0" => Reg::x0,
  "zero" => Reg::x0,
  "x1" => Reg::ra,
  "ra" => Reg::ra,
  "x2" => Reg::sp,
  "sp" => Reg::sp,
  "x3" => Reg::s0,
  "s0" => Reg::s0,
  "x4" => Reg::s1,
  "s1" => Reg::s1,
  "x5" => Reg::s2,
  "s2" => Reg::s2,
  "x6" => Reg::s3,
  "s3" => Reg::s3,
  "x7" => Reg::s4,
  "s4" => Reg::s4,
  "x8" => Reg::s5,
  "s5" => Reg::s5,
  "x9" => Reg::s6,
  "s6" => Reg::s6,
  "x10" => Reg::s7,
  "s7" => Reg::s7,
  "x11" => Reg::a0,
  "a0" => Reg::a0,
  "x12" => Reg::a1,
  "a1" => Reg::a1,
  "x13" => Reg::a2,
  "a2" => Reg::a2,
  "x14" => Reg::a3,
  "a3" => Reg::a3,
  "x15" => Reg::a4,
  "a4" => Reg::a4,
  "x16" => Reg::a5,
  "a5" => Reg::a5,
  "x17" => Reg::a6,
  "a6" => Reg::a6,
  "x18" => Reg::a7,
  "a7" => Reg::a7,
  "x19" => Reg::t0,
  "t0" => Reg::t0,
  "x20" => Reg::t1,
  "t1" => Reg::t1,
  "x21" => Reg::t2,
  "t2" => Reg::t2,
  "x22" => Reg::t3,
  "t3" => Reg::t3,
  "x23" => Reg::t4,
  "t4" => Reg::t4,
  "x24" => Reg::t5,
  "t5" => Reg::t5,
  "x25" => Reg::t6,
  "t6" => Reg::t6,
  "x26" => Reg::t7,
  "t7" => Reg::t7,
  "x27" => Reg::t8,
  "t8" => Reg::t8,
  "x28" => Reg::t9,
  "t9" => Reg::t9,
  "x29" => Reg::t10,
  "t10" => Reg::t10,
  "x30" => Reg::t11,
  "t11" => Reg::t11,
  "x31" => Reg::t12,
  "t12" => Reg::t12,
};

Reg: RegLink<'input> = {
  <reg:RegLit> => RegLink::Direct(reg),
  <ident:Ident> => RegLink::Alias(ident),
};

Exp: Exp<'input> = {
  Dir => Exp::Directive(<>),
  Comment => Exp::Comment(<>),
  Label => Exp::Label(<>),
  Op => Exp::Word(<>),
  PseudoOp => Exp::Word(<>),
};

Dir: Directive<'input> = {
  ".alias" <ident:Ident> <reg:RegLit> => Directive::Alias(ident, reg),
  ".def" <ident:Ident> <reg:RegLit> => Directive::Alias(ident, reg),
  ".equ" <ident:Ident> <imm:NumLit> => Directive::Constant(ident, imm as i16),
  ".zero" <num:NumLit> => Directive::Zero(num as i16),
  ".byte" <num:NumLit*> => Directive::Byte(num.iter().map(|i| *i as u8).collect()),
  ".half" <num:NumLit*> => Directive::Half(num.iter().map(|i| *i as u16).collect()),
  ".word" <num:NumLit*> => Directive::Word(num.iter().map(|i| *i as u32).collect()),
  ".string" <s:String> => Directive::Byte(s.as_bytes().to_vec()),
  ".incbin" <f:String> => Directive::IncBin(f),
};

Imm: Immediate<'input> = {
  <val:NumLit> => Immediate::absolute(val as i16, None),
  <ident:Ident> => Immediate::absolute(0, Some(ident)),
};

RegImm: Immediate<'input> = {
  "(pc)" => Immediate::absolute(0, Some("pc")),
  <val:NumLit> "(pc)" => Immediate::absolute(val as i16, Some("pc")),
  "(" <reg:Reg> ")" => Immediate::relative(reg, 0, None),
  <val:NumLit> "(" <reg:Reg> ")" => Immediate::relative(reg, val as i16, None),
  <ident:Ident> "(" <reg:Reg> ")" => Immediate::relative(reg, 0, Some(ident)),
  Imm => <>,
};

OpRA: Opcode = {
  "ecall" => Opcode::ecall,
  "lb" => Opcode::lb,
  "lbu" => Opcode::lbu,
  "lh" => Opcode::lh,
  "lhu" => Opcode::lhu,
  "lw" => Opcode::lw,
  "la" => Opcode::la,
  "sb" => Opcode::sb,
  "sh" => Opcode::sh,
  "sw" => Opcode::sw,
};

OpRI: Opcode = {
  "addi" => Opcode::addi,
  "andi" => Opcode::andi,
  "muli" => Opcode::muli,
  "ori" => Opcode::ori,
  "slli" => Opcode::slli,
  "sltiu" => Opcode::sltiu,
  "srli" => Opcode::srli,
  "xori" => Opcode::xori,
};

OpRM: Opcode = {
  "add" => Opcode::add,
  "and" => Opcode::and,
  "mul" => Opcode::mul,
  "or" => Opcode::or,
  "sll" => Opcode::sll,
  "slt" => Opcode::slt,
  "sltu" => Opcode::sltu,
  "sra" => Opcode::sra,
  "srl" => Opcode::srl,
  "sub" => Opcode::sub,
  "xor" => Opcode::xor,
};

OpRO: Opcode = {
  "beq" => Opcode::beq,
  "bne" => Opcode::bne,
  "bge" => Opcode::bge,
  "blt" => Opcode::blt,
  "bgeu" => Opcode::bgeu,
  "bltu" => Opcode::bltu,
};

Op: Word<'input> = {
  <op:OpRM> <r1:Reg> <r2:Reg> <r3:Reg> => Word::new(op, r1, r2, r3, None),
  <op:OpRI> <r1:Reg> <r2:Reg> <imm:Imm> => Word::new(op, r1, r2, RegLink::zero(), Some(imm)),
  <op:OpRO> <r1:Reg> <r2:Reg> <imm:RegImm> => Word::new(op, r1, r2, RegLink::zero(), Some(imm)),
  <op:OpRA> <r1:Reg> <imm:RegImm> => Word::new(op, r1, RegLink::zero(), RegLink::zero(), Some(imm)),
  "lui" <r1:Reg> <imm:Imm> => Word::new(Opcode::lui, r1, RegLink::zero(), RegLink::zero(), Some(imm)),
  "jal" <imm:RegImm> => Word::new(Opcode::jal,  RegLink::zero(), RegLink::zero(), RegLink::zero(), Some(imm)),
  "halt" => Word::new(Opcode::halt, RegLink::zero(), RegLink::zero(), RegLink::zero(), None),
}

PseudoOp: Word<'input> = {
  "nop" => Word::new(Opcode::add, RegLink::zero(), RegLink::zero(), RegLink::zero(), None),
  "ret" => Word::new(Opcode::beq, RegLink::zero(), RegLink::zero(), RegLink::Direct(Reg::ra), None),
  "j" <imm:RegImm> => Word::new(Opcode::beq, RegLink::zero(), RegLink::zero(), RegLink::zero(), Some(imm)),
  "li" <r:Reg> <imm:RegImm> => Word::new(Opcode::addi, r, RegLink::zero(), RegLink::zero(), Some(imm)),
  "inc" <r:Reg> => Word::new(Opcode::addi, r, r, RegLink::zero(), Some(Immediate::absolute(1, None))),
  "dec" <r:Reg> => Word::new(Opcode::addi, r, r, RegLink::zero(), Some(Immediate::absolute(-1, None))),
  "beqz" <r:Reg> <imm:RegImm> => Word::new(Opcode::beq, r, RegLink::zero(), RegLink::zero(), Some(imm)),
  "bnez" <r:Reg> <imm:RegImm> => Word::new(Opcode::bne, r, RegLink::zero(), RegLink::zero(), Some(imm)),
  "blez" <r:Reg> <imm:RegImm> => Word::new(Opcode::bge, RegLink::zero(), r, RegLink::zero(), Some(imm)),
  "bgez" <r:Reg> <imm:RegImm> => Word::new(Opcode::bge, r, RegLink::zero(), RegLink::zero(), Some(imm)),
  "bltz" <r:Reg> <imm:RegImm> => Word::new(Opcode::blt, r, RegLink::zero(), RegLink::zero(), Some(imm)),
  "bgtz" <r:Reg> <imm:RegImm> => Word::new(Opcode::blt, RegLink::zero(), r, RegLink::zero(), Some(imm)),
  "mv" <r1:Reg> <r2:Reg> => Word::new(Opcode::addi, r1, r2, RegLink::zero(), None),
  "bgt" <r1:Reg> <r2:Reg> <imm:RegImm> => Word::new(Opcode::blt, r2, r1, RegLink::zero(), Some(imm)),
  "ble" <r1:Reg> <r2:Reg> <imm:RegImm> => Word::new(Opcode::bge, r2, r1, RegLink::zero(), Some(imm)),
  "bgtu" <r1:Reg> <r2:Reg> <imm:RegImm> => Word::new(Opcode::bltu, r2, r1, RegLink::zero(), Some(imm)),
  "bleu" <r1:Reg> <r2:Reg> <imm:RegImm> => Word::new(Opcode::bgeu, r2, r1, RegLink::zero(), Some(imm)),
  "not"  <r1:Reg> <r2:Reg> => Word::new(Opcode::xori, r1, r2, RegLink::zero(), Some(Immediate::absolute(-1, None))),
  "seqz" <r1:Reg> <r2:Reg> => Word::new(Opcode::sltiu, r1, r2, RegLink::zero(), Some(Immediate::absolute(1, None))),
  "snez" <r1:Reg> <r2:Reg> => Word::new(Opcode::sltu, r1, RegLink::zero(), r2, None),
  "sltz" <r1:Reg> <r2:Reg> => Word::new(Opcode::slt, r1, r2, RegLink::zero(), None),
  "sgtz" <r1:Reg> <r2:Reg> => Word::new(Opcode::slt, r1, RegLink::zero(), r2, None),
  "neg"  <r1:Reg> <r2:Reg> => Word::new(Opcode::sub, r1, RegLink::zero(), r2, None),
}
