use crate::*;
use crate::parser::*;

grammar;

pub Strip: Exprs<'input> = <Exp*> => <>;

Comment: &'input str = {
  r"#.*" => <>,
  r"//.*" => <>,
};

Ident: &'input str = r"[A-z][/./_A-z0-9]*" => <>;
String: &'input str = "\"" <ident:Ident> "\"" => ident;
Label: &'input str = <ident:Ident> ":" => ident;

NumLit: i64 = {
  r"-?[0-9]+" => i32::from_str_radix(<>, 10).unwrap() as i64,
  <num:r"0b[01]+"> => u64::from_str_radix(&num[2..], 2).unwrap() as i64,
  <num:r"0x[a-f0-9]+"> => u64::from_str_radix(&num[2..], 16).unwrap() as i64,
};

RegLit: Reg = {
  "zero" => Reg::Zero,
  "ra" => Reg::RA,
  "s0" => Reg::S0,
  "s1" => Reg::S1,
  "s2" => Reg::S2,
  "s3" => Reg::S3,
  "s4" => Reg::S4,
  "s5" => Reg::S5,
};

Reg: RegLink<'input> = {
  <reg:RegLit> => RegLink::Direct(reg),
  <ident:Ident> => RegLink::Alias(ident),
};

Addr: Address<'input> = {
  "(pc)" => Address::new(RegLink::Direct(Reg::Zero), 0, Some("pc")),
  "(" <reg:Reg> ")" => Address::new(reg, 0, None),
  <offset:NumLit> "(pc)" => Address::new(RegLink::Direct(Reg::Zero), offset as i16, Some("pc")),
  <offset:NumLit> => Address::new(RegLink::Direct(Reg::Zero), offset as i16, None),
  <offset:NumLit> "(" <reg:Reg> ")" => Address::new(reg, offset as i16, None),
  <ident:Ident> "(" <reg:Reg> ")" => Address::new(reg, 0, Some(ident)),
  <ident:Ident> => Address::new(RegLink::Direct(Reg::Zero), 0, Some(ident)),
};

Exp: Exp<'input> = {
  Dir => Exp::Directive(<>),
  Comment => Exp::Comment(<>),
  Label => Exp::Label(<>),
  Op => Exp::Word(<>),
  PseudoOp => Exp::Words(<>),
};

Dir: Directive<'input> = {
  ".alias" <ident:Ident> <reg:RegLit> => Directive::Alias(ident, reg),
  ".def" <ident:Ident> <reg:RegLit> => Directive::Alias(ident, reg),
  ".equ" <ident:Ident> <imm:NumLit> => Directive::Constant(ident, imm as i16),
  ".zero" <num:NumLit> => Directive::Zero(num as i16),
  ".byte" <num:NumLit*> => Directive::Byte(num.iter().map(|i| *i as u8).collect()),
  ".half" <num:NumLit*> => Directive::Half(num.iter().map(|i| *i as u16).collect()),
  ".word" <num:NumLit*> => Directive::Word(num.iter().map(|i| *i as u32).collect()),
  ".string" <s:String> => Directive::Byte(s.as_bytes().to_vec()),
  ".incbin" <f:String> => Directive::IncBin(f),
};

Op: Word<'input> = {
  <op:Op1RA> <r1:Reg> <addr:Addr> => Word::new(op, r1, RegLink::Direct(Reg::Zero), RegLink::Direct(Reg::Zero), 0, Some(addr)),
  <op:Op2RA> <r1:Reg> <r2:Reg> <addr:Addr> => Word::new(op, r1, r2, RegLink::Direct(Reg::Zero), 0, Some(addr)),
  <op:Op3R> <r1:Reg> <r2:Reg> <r3:Reg> => Word::new(op, r1, r2, r3, 0, None),
}

PseudoOp: Vec<Word<'input>> = {
  "nop" => vec![Word::new(Opcode::ADD, RegLink::Direct(Reg::Zero), RegLink::Direct(Reg::Zero), RegLink::Direct(Reg::Zero), 0, None)],
  "ret" => vec![Word::new(Opcode::BEQ, RegLink::Direct(Reg::Zero), RegLink::Direct(Reg::Zero), RegLink::Direct(Reg::RA), 0, None)],
  "j" <addr:Addr> => vec![Word::new(Opcode::BEQ, RegLink::Direct(Reg::Zero), RegLink::Direct(Reg::Zero), RegLink::Direct(Reg::Zero), 0, Some(addr))],
  "inc" <r1:Reg> => vec![Word::new(Opcode::ADDI, r1, r1, RegLink::Direct(Reg::Zero), 1, None)],
  "dec" <r1:Reg> => vec![Word::new(Opcode::ADDI, r1, r1, RegLink::Direct(Reg::Zero), -1, None)],
  "mv" <r1:Reg> <r2:Reg> => vec![Word::new(Opcode::ADDI, r1, r2, RegLink::Direct(Reg::Zero), 0, None)],
  "li" <r1:Reg> <addr:Addr> => vec![Word::new(Opcode::ADDI, r1, RegLink::Direct(Reg::Zero), RegLink::Direct(Reg::Zero), 0, Some(addr))],
  "bgt" <r1:Reg> <r2:Reg> <addr:Addr> => vec![Word::new(Opcode::BLT, r2, r1, RegLink::Direct(Reg::Zero), 0, Some(addr))],
  "ble" <r1:Reg> <r2:Reg> <addr:Addr> => vec![Word::new(Opcode::BGE, r2, r1, RegLink::Direct(Reg::Zero), 0, Some(addr))],
  "bgtu" <r1:Reg> <r2:Reg> <addr:Addr> => vec![Word::new(Opcode::BLTU, r2, r1, RegLink::Direct(Reg::Zero), 0, Some(addr))],
  "bleu" <r1:Reg> <r2:Reg> <addr:Addr> => vec![Word::new(Opcode::BGEU, r2, r1, RegLink::Direct(Reg::Zero), 0, Some(addr))],
  "beqz" <r1:Reg> <addr:Addr> => vec![Word::new(Opcode::BEQ, r1, RegLink::Direct(Reg::Zero), RegLink::Direct(Reg::Zero), 0, Some(addr))],
  "bnez" <r1:Reg> <addr:Addr> => vec![Word::new(Opcode::BNE, r1, RegLink::Direct(Reg::Zero), RegLink::Direct(Reg::Zero), 0, Some(addr))],
  "blez" <r1:Reg> <addr:Addr> => vec![Word::new(Opcode::BGE, RegLink::Direct(Reg::Zero), r1, RegLink::Direct(Reg::Zero), 0, Some(addr))],
  "bgez" <r1:Reg> <addr:Addr> => vec![Word::new(Opcode::BGE, r1, RegLink::Direct(Reg::Zero), RegLink::Direct(Reg::Zero), 0, Some(addr))],
  "bltz" <r1:Reg> <addr:Addr> => vec![Word::new(Opcode::BLT, r1, RegLink::Direct(Reg::Zero), RegLink::Direct(Reg::Zero), 0, Some(addr))],
  "bgtz" <r1:Reg> <addr:Addr> => vec![Word::new(Opcode::BLT, RegLink::Direct(Reg::Zero), r1, RegLink::Direct(Reg::Zero), 0, Some(addr))],
  "not"  <r1:Reg> <r2:Reg> => vec![Word::new(Opcode::XORI, r1, r2, RegLink::Direct(Reg::Zero), -1, None)],
  "seqz" <r1:Reg> <r2:Reg> => vec![Word::new(Opcode::SLTIU, r1, r2, RegLink::Direct(Reg::Zero), 1, None)],
  "snez" <r1:Reg> <r2:Reg> => vec![Word::new(Opcode::SLTU, r1, RegLink::Direct(Reg::Zero), r2, 0, None)],
  "sltz" <r1:Reg> <r2:Reg> => vec![Word::new(Opcode::SLT, r1, r2, RegLink::Direct(Reg::Zero), 0, None)],
  "sgtz" <r1:Reg> <r2:Reg> => vec![Word::new(Opcode::SLT, r1, RegLink::Direct(Reg::Zero), r2, 0, None)],
  "neg"  <r1:Reg> <r2:Reg> => vec![Word::new(Opcode::SUB, r1, RegLink::Direct(Reg::Zero), r2, 0, None)],
}

Op1RA: Opcode = {
  "ecall" => Opcode::ECALL,
  "la" => Opcode::LA,
  "lb" => Opcode::LB,
  "lbu" => Opcode::LBU,
  "lh" => Opcode::LH,
  "lhu" => Opcode::LHU,
  "lui" => Opcode::LUI,
  "lw" => Opcode::LW,
  "sb" => Opcode::SB,
  "sh" => Opcode::SH,
  "sw" => Opcode::SW,
};

Op2RA: Opcode = {
  "addi" => Opcode::ADDI,
  "ori" => Opcode::ORI,
  "andi" => Opcode::ANDI,
  "muli" => Opcode::MULI,
  "xori" => Opcode::XORI,
  "slli" => Opcode::SLLI,
  "srli" => Opcode::SRLI,
  "beq" => Opcode::BEQ,
  "bne" => Opcode::BNE,
  "bge" => Opcode::BGE,
  "blt" => Opcode::BLT,
  "bgeu" => Opcode::BGEU,
  "bltu" => Opcode::BLTU,
  "sltiu" => Opcode::SLTIU,
};

Op3R: Opcode = {
  "add" => Opcode::ADD,
  "and" => Opcode::AND,
  "mul" => Opcode::MUL,
  "or" => Opcode::OR,
  "sll" => Opcode::SLL,
  "slt" => Opcode::SLT,
  "sltu" => Opcode::SLTU,
  "sra" => Opcode::SRA,
  "srl" => Opcode::SRL,
  "sub" => Opcode::SUB,
  "xor" => Opcode::XOR,
};